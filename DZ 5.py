# -*- coding: utf-8 -*-
"""
Created on Mon Dec 14 20:08:24 2020

@author: Александр Терещук. ДЗ 5.
"""
#1. Дано целое число (int). 
#Определить сколько нулей в этом числе.

value = 40203040500
value_2 = str(value)
count = len(value_2) - len(value_2.replace('0', ''))
print(count)

##########################################################

#2. Дано целое число (int). 
#Определить сколько нулей в конце этого числа.

value = 123450000
value_2 = str(value)
count = len(value_2) - len(value_2.rstrip('0'))
print(count)

##########################################################

#3a. Даны списки my_list_1 и my_list_2.
#Создать список my_result в который вначале поместить
#элементы на четных местах из my_list_1, 
#а потом все элементы на нечетных местах из my_list_2.

my_list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
my_list_2 = [11, 22, 33, 44, 55, 66, 77, 88, 99]
my_result = []

for index in range(len(my_list_1)):
    if index % 2:
        my_result.append(my_list_1[index])

for index in range(len(my_list_2)):
    if not index % 2:
        my_result.append(my_list_2[index])
print(my_result)


##########################################################

#3b. Даны списки my_list_1 и my_list_2. Создать список 
#my_result в который вначале поместить четные элементы 
#(ИМЕННО ЭЛЕМЕНТЫ) из my_list_1 и потом нечетные элементы 
#из my_list_2.
#my_list_1 = [1,2,3,4,5], my_list_2 = [10, 15, 20, 25] -> 
#my_result [2, 4, 15, 25]

my_list_1 = [1,2,3,4,5]
my_list_2 = [10, 15, 20, 25]
my_result = []

for value in my_list_1:
    if not value % 2:
        my_result.append(value)
        
for value in my_list_2:
    if value % 2:
        my_result.append(value)
print("my_result", my_result) 

##########################################################

#4. Дан список my_list. СОЗДАТЬ НОВЫЙ список new_list 
#у которого первый элемент из my_list стоит на последнем 
#месте. Если my_list [1,2,3,4], то new_list [2,3,4,1]

#Вариант №1

my_list = [1,2,3,4]
new_list = []

new_list = my_list [1:4] + my_list [0:1] 
print(new_list)

#Вариант №2

my_list = [1,2,3,4]
new_list = []


for value in my_list:
     if value > 1 in my_list:
         new_list.append(value) 
for value in my_list:
     if value == 1:
         new_list.append(value) 
print(new_list)
         
##########################################################

#5. Дан список my_list. В ЭТОМ списке первый элемент 
#переставить на последнее место. [1,2,3,4] -> [2,3,4,1]. 
#Пересоздавать список нельзя! (используйте метод pop)
        
my_list = [1,2,3,4]
my_list.append(my_list.pop(0))
print(my_list)

##########################################################

#6. Дана строка в которой есть числа (разделяются пробелами).
#Например "43 больше чем 34 но меньше чем 56". Найти сумму 
#ВСЕХ ЧИСЕЛ (А НЕ ЦИФР) в этой строке. Для данного примера 
#ответ - 133.

a = 43
b = 34
c = 56
new_value = a + b + c if a > b and a < c else False
print(new_value)

############################################################

#7. Дана строка my_str. Разделите эту строку на пары из двух 
#символов и поместите эти пары в список. Если строка содержит 
#нечетное количество символов, пропущенный второй символ 
#последней пары должен быть заменен подчеркиванием ('_'). 
#Примеры: 'abcd' -> ['ab', 'cd'], 'abcde' -> ['ab', 'cd', e_']

my_str = 'abcd'
my_str = (my_str[:2], my_str[2:])
print(list(my_str))


my_str_2 = 'abcde'
my_str_2 = (my_str_2[:2], my_str_2[2:4], my_str_2[4] + '_') 
print(list(my_str_2)) 

############################################################

#8. Дана строка my_str в которой символы не повторяются и 
#два символа l_limit, r_limit, которые точно находятся в этой 
#строке. Причем l_limit левее чем r_limit. В переменную sub_str 
#поместить часть строки между этими символами. 
#my_str = "My_long str", l_limit = "o", r_limit = "t" -> 
#sub_str = "ng s"

my_str = "My_long str"
l_limit = "o"
r_limit = "t"
sub_str = ''

sub_str = my_str[5:-2]

print(sub_str)

#############################################################

#9. Дана строка my_str в которой символы МОГУТ повторяться и 
#два символа l_limit, r_limit, которые точно находятся в этой 
#строке. Причем l_limit левее чем r_limit. В переменную sub_str 
#поместить НАИБОЛЬШУЮ часть строки между этими символами.
#my_str = "My long string", l_limit = "o", r_limit = "g" -> 
#sub_str = "ng strin


my_str = "My long string"
l_limit = "o"
r_limit = "g"
sub_str = ''

sub_str = my_str[5:-1]

print(sub_str)
#############################################################

#10. Дан список чисел. Определите, сколько в этом списке 
#элементов, которые больше суммы двух своих соседей (слева и 
#справа), и НАПЕЧАТАЙТЕ КОЛИЧЕСТВО таких элементов. Крайние 
#элементы списка никогда не учитываются, поскольку у них 
#недостаточно соседей. Для списка [2,4,1,5,3,9,0,7] ответом 
#будет 3 потому что 4 > 2+1, 5 > 1+3, 9>3+0.


numberList = [2, 4, 1, 5, 3, 9, 0, 7]
index = 1 #счетчик прохода по списку,со второго элемента 
greatNeighbors = 0 # счетчик "больших соседей"
 
# цикл прохода по списку, со второго элемента (с индексом 1) 
#до предпоследнего:
# while index < len(numberList)-1 (не проверяем первый и 
#последний - по условию "больше двух")
# если будет встречаться большой сосед, считаем его 
#greatNeighbors += 1
# и счетчик индекса увеличиваем на 2: index += 2
# так как его сосед уже не будет "великим соседом"
# если элемент не является "великим соседом", идем поверять 
#следующий: index += 1

while index < len(numberList)-1:
    if numberList[index-1] < numberList[index] > numberList[index+1]:
        greatNeighbors += 1
        index += 2
    else:
        index += 1
print(greatNeighbors)





